trigger:
- master

pool:
  vmImage: ubuntu-latest

stages:

  - stage: firststage
    jobs:

      - job: firstjob
        pool:
          vmImage: 'ubuntu-latest'
        steps:

          # To pass the variable FOO, write it to a file
          # While the file name doesn't matter, naming it like the variable and putting it inside the $(Pipeline.Workspace)/variables folder could be a good pattern
          - bash: |
              FOO="some value"
              mkdir -p $(Pipeline.Workspace)/variables
              echo "$FOO" > $(Pipeline.Workspace)/variables/FOO

          # Publish the folder as pipeline artifact
          - publish: $(Pipeline.Workspace)/variables
            artifact: variables
  
  - stage: secondstage
    jobs:

      - job: secondjob
        pool:
          vmImage: 'ubuntu-latest'
        steps:

          # Download the artifacts
          - download: current
            artifact: variables

          # Read the variable from the file, then expose it in the job
          - bash: |
              FOO=$(cat $(Pipeline.Workspace)/variables/FOO)
              echo "##vso[task.setvariable variable=FOO]$FOO"

          # Just like in the first example, we can expand the variable within Azure Pipelines itself
          - bash: |
              echo "$(FOO)"

          # Or we can expand it within bash, reading it as environmental variable
          - bash: |
              echo "$FOO"

          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'dailylearn-non-prod (45fdc4e4-fd56-47ea-92ca-063efaaa265b)'
              KeyVaultName: 'dl-non-prod-vault'
              SecretsFilter: '*'
              RunAsPreJob: false

          - task: CmdLine@2
            inputs:
              script: 'echo $(deploykey) > secret.txt'
          - bash: |
              cat $(secret.txt)
                    
